renderView:
  - type: Markdown
    content: |
      # DataFilter

      The `DataFilter` component allows you to filter data from the global or template context before rendering its content. It is particularly useful for conditional display of elements based on dynamic complex criteria, such as filtering lists, trees, or data subsets.

      ## Properties

  - type: DefinitionList
    content:
      - term:
          code: filters
          after: "(array, required)"
        details:
          - type: Markdown
            content: "Array of filter objects, each specifying properties and conditions to check:"
          - type: DefinitionList
            content:
              - term:
                  code: subjectsWithProperty
                  after: "(string)"
                details: Property to check in the data, acts as namespace.
              - term:
                  code: andConditions
                  after: "(array)"
                details: List of conditions that must all be true.
              - term:
                  code: orConditions
                  after: "(array)"
                details: List of conditions where at least one must be true.
              - term:
                  code: availableConditions
                  after: "(info)"
                details:
                  type: Markdown
                  content: |
                    Available condition keys inside conditions objects:
                    - `when`: Checks a condition on a value.
                    - `is`: Compares exact equality.
                    - `isNot`: Checks inequality.
                    - `isEmpty`: Checks if a value is empty.
                    - `isNotEmpty`: Checks if a value is not empty.
                    - `contains`: Checks if a value contains a substring.
                    - `>=`, `<=`, `>`, `<`: Numeric comparisons.
                    - `compareAsDates`: Boolean to compare values as dates.
                    - `whenFilterableData`: Specifies the data path to filter, must include the namespace.
      - term:
          code: context
          after: "(string, optional)"
        details:
          type: Markdown
          content: "Context to filter (`global` or `template`). Default: `global`."
      - term:
          code: content
          after: "(object|array, required)"
        details: Content to render after filtering.

  - type: Markdown
    content: |
      ## Behavior
      - Applies all filters to the selected context before content rendering.
      - Supports complex filtering conditions with `andConditions` and `orConditions`.
      - Allows recursive filtering while preserving data structure.
      - Can be combined with other components to create interactive filtering interfaces.
      - Supports dynamic filtering based on application state

      ## Filterable Data Structure
      
      DataFilter uses a specific pattern to identify and filter data. This pattern relies on an identification key (namespace) that must be consistent between the data structure and filtering conditions.
      
      ### Namespace Pattern
      
      1. **In the data structure**:
      ```yaml
      data:
        filteredItems:
          - item:           # <- Identification key (namespace)
              id: 1
              title: "..."
          - item:           # <- Same key for each item
              id: 2
              title: "..."
      ```
      
      2. **In filtering conditions**:
      ```yaml
      type: DataFilter
      context: global
      filters:
        - subjectsWithProperty: item    # <- Declares the namespace
          andConditions:
            - orConditions:
                - whenFilterableData: item.title  # <- Uses the namespace
                  contains: "..."
      ```
      
      The identification key (here "item"):
      - Can have any name (`itemXyz`, `element`, etc.).
      - Must be consistent between data structure and conditions.
      - Serves as a namespace for accessing properties in `whenFilterableData`.
      - Is required for DataFilter to correctly identify filterable elements.

  - type: RjBuildDescriber
    title: Advanced Example
    toDescribe:
      renderView:
        - type: div
          attributes:
            class: "container-fluid"
          content:
            - type: div
              attributes:
                class: "row mb-4"
              content:
                - type: div
                  attributes:
                    class: "col-md-6"
                  content:
                    - type: div
                      attributes:
                        class: "card h-100"
                      content:
                        - type: div
                          attributes:
                            class: "card-header bg-secondary text-white"
                          content:
                            - type: h5
                              attributes:
                                class: "card-title mb-0"
                              content: "üìã All Items (Unfiltered)"
                        - type: div
                          attributes:
                            class: "card-body"
                          content:
                            - type: div
                              attributes:
                                class: "list-group list-group-flush"
                              content:
                                type: Switch
                                content: ~.filteredItems
                                singleOption:
                                  load: item
                - type: div
                  attributes:
                    class: "col-md-6"
                  content:
                    - type: div
                      attributes:
                        class: "card h-100"
                      content:
                        - type: div
                          attributes:
                            class: "card-header bg-primary text-white"
                          content:
                            - type: h5
                              attributes:
                                class: "card-title mb-0"
                              content: "üîç Filtered Results"
                        - type: div
                          attributes:
                            class: "card-body"
                          content:
                            - type: DataFilter
                              context: global
                              filters:
                                - subjectsWithProperty: item
                                  andConditions:
                                    # Text search filter
                                    - orConditions:
                                        - when: ~~._filters.search
                                          isEmpty:
                                        - whenFilterableData: item.searchableContent
                                          contains: ~~._filters.search

                                    # Date filter
                                    - orConditions:
                                        - when: ~~._filters.since
                                          isEmpty:
                                        - whenFilterableData: item.creationDate
                                          ">=": ~~._filters.since
                                          compareAsDates: true

                                    # Status filter
                                    - orConditions:
                                        - when: ~~._filters.status
                                          isNot: active_only
                                        - whenFilterableData: item.status
                                          is: active

                              content:
                                - type: div
                                  attributes:
                                    class: "list-group list-group-flush"
                                  content:
                                    type: Switch
                                    content: ~~.filteredItems
                                    singleOption:
                                      load: item
            - type: div
              attributes:
                class: "row mt-4"
              content:
                - type: div
                  attributes:
                    class: "col-12"
                  content:
                    - type: div
                      attributes:
                        class: "card"
                      content:
                        - type: div
                          attributes:
                            class: "card-header bg-info text-white"
                          content:
                            - type: h5
                              attributes:
                                class: "card-title mb-0"
                              content: "‚öôÔ∏è Filter Controls"
                        - type: div
                          attributes:
                            class: "card-body"
                          content:
                            # Filtering interface
                            - type: div
                              attributes:
                                class: "row g-3"
                              content:
                                - type: div
                                  attributes:
                                    class: "col-md-4"
                                  content:
                                    - type: TextField
                                      placeholder: "Search..."
                                      dataLocation: ~~._filters.search
                                - type: div
                                  attributes:
                                    class: "col-md-4"
                                  content:
                                    - # TODO: replace this by the DateField when DateField will support type="date".
                                      type: TextField
                                      inputType: date
                                      dataLocation: ~~._filters.since
                                - type: div
                                  attributes:
                                    class: "col-md-4"
                                  content:
                                    - type: SelectField
                                      dataLocation: ~~._filters.status
                                      options:
                                        - label: "All"
                                          value: all
                                        - label: "Active only"
                                          value: active_only

      templates:
        item:
          type: div
          attributes:
            class: "list-group-item d-flex justify-content-between align-items-center border-start-0 border-end-0 py-3"
          content:
            - type: div
              attributes:
                class: "d-flex align-items-center gap-3"
              content:
                - type: CheckBoxField
                  attributes:
                    class: "form-check"
                  options:
                    - value: true
                      label: ""
                  dataLocation: ~.item.isSelected
                - type: div
                  attributes:
                    class: "d-flex flex-column"
                  content:
                    - type: div
                      attributes:
                        class: "fw-bold mb-1"
                      content: ~.item.searchableContent
                    - type: div
                      attributes:
                        class: "text-muted small"
                      content: ~.item.creationDate
            - type: div
              attributes:
                class: "d-flex gap-2"
              content:
                - type: span
                  attributes:
                    class: "badge rounded-pill"
                    style:
                      backgroundColor: "#198754"
                      color: "white"
                  content: ~.item.status
                  actions:
                    - what: hide
                      when: ~.item.status
                      isNot: active
                - type: span
                  attributes:
                    class: "badge rounded-pill"
                    style:
                      backgroundColor: "#dc3545"
                      color: "white"
                  content: ~.item.status
                  actions:
                    - what: hide
                      when: ~.item.status
                      is: active
      data:
        _filters:
          search: ""
          since: ""
          status: "all"
        filteredItems:
          - item:
              id: 1
              searchableContent: "First item"
              status: "active"
              creationDate: "2024-03-20"
              isSelected: true
          - item:
              id: 2
              searchableContent: "Second item"
              status: "inactive"
              creationDate: "2024-03-19"
              isSelected: false

  - type: Markdown
    content: |
      ## Advanced Use Cases
      - Multi-criteria filtering with combined conditions.
      - Real-time search interface.
      - Hierarchical data filtering (trees, sub-elements).
      - Complex state management (conflicts, modifications, new elements).
      - Integration with pagination components.
      - Date-based filtering and numeric comparisons.

      ## Best Practices
      - Organize filters by logical category.
      - Use comments to document complex conditions.
      - Combine with UI components for interactive experience.
      - Consider performance with large datasets.
      - Use reusable templates for common filters.

      ## Limitations
      - Filtering is based on simple comparisons.
      - Performance may be impacted with very large datasets.
      - Does not support custom filtering functions.
      - Filtering is applied recursively on the entire structure.