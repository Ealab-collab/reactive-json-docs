renderView:
  - type: Markdown
    content: |
      # ReactOnEvent

      **Type**: Internal Action Component

      **Description**: ReactOnEvent is an internal action component that is automatically instantiated by the Actions system when reactions with event handlers (`on: "eventName"`) are detected. It should **not** be used directly as an element type.

      ## How it Works

      When you define actions with event handlers (like `on: "click"`), the Actions system automatically:

      1. Collects all reactions with event handlers for the element
      2. Groups them by event type (click, change, mouseover, etc.)
      3. Creates a ReactOnEvent component that attaches the appropriate event listeners
      4. Wraps the target element with these event handlers

  - type: RjBuildDescriber
    title: "Correct Usage: Reactions with Events"
    description:
      - type: Markdown
        content: |
          This example shows the **correct** way to use event handling in Reactive-JSON. 
          
          ReactOnEvent is automatically created by the system when you use `on: "eventName"` in actions.

    toDescribe:
      renderView:
        - type: div
          content:
            - type: button
              content: "Click me"
              actions:
                - what: setData
                  on: click              # ReactOnEvent handles this automatically
                  path: "clicked"
                  value: true
                - what: setData
                  on: click
                  path: "clickCount"
                  value: 1
                  when: ~.clickCount
                  isEmpty: true
                - what: setData
                  on: click
                  path: "clickCount"
                  value: "~.clickCount + 1"
                  when: ~.clickCount
                  isEmpty: "not"
                  
            - type: input
              props:
                type: "text"
                placeholder: "Type something..."
              actions:
                - what: setData
                  on: change           # ReactOnEvent handles this automatically
                  path: "inputValue"
                  value: "~event.target.value"
                  
            - type: div
              content: "Mouse over this area"
              props:
                style:
                  padding: "10px"
                  border: "1px solid #ccc"
                  backgroundColor: "~.hovered ? '#f0f0f0' : 'white'"
              actions:
                - what: setData
                  on: mouseover       # ReactOnEvent handles this automatically
                  path: "hovered"
                  value: true
                - what: setData
                  on: mouseleave      # ReactOnEvent handles this automatically
                  path: "hovered"
                  value: false
              
        - type: div
          content:
            - type: div
              content: ["Button clicked: ", ~.clicked]
              
            - type: div
              content: ["Click count: ", ~.clickCount]
              
            - type: div
              content: ["Input value: '", ~.inputValue, "'"]
              
            - type: div
              content: ["Mouse hover state: ", ~.hovered]

        - type: button
          content: "Reset all"
          actions:
            - what: setData
              on: click
              path: "clicked"
              value: false
            - what: setData
              on: click
              path: "clickCount"
              value: 0
            - what: setData
              on: click
              path: "inputValue"
              value: ""
            - what: setData
              on: click
              path: "hovered"
              value: false

      data:
        clicked: false
        clickCount: 0
        inputValue: ""
        hovered: false

  - type: Markdown
    content: |
      ## Important Notes
      
      - **Never use `type: ReactOnEvent`** in your renderView - it's an internal component
      - **Use `actions` with `on: "eventName"`** - this is the correct way to handle events
      - **ReactOnEvent is automatically instantiated** by the Actions system when needed
      - **Event propagation is stopped by default** - use `stopPropagation: false` to change this
      
      ## Related Documentation
      
      - **[Actions System](index.md)**: Learn about the actions system that uses ReactOnEvent
      - **[Reactions](../reaction/index.md)**: The reaction functions that ReactOnEvent executes
      - **[MessageListener](MessageListener.md)**: For `on: "message"` events
      - **[HashChangeListener](HashChangeListener.md)**: For `on: "hashchange"` events 